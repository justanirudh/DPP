Microsoft's campus in Redmond is rather large, consisting of dozens of buildings and roads connecting them. Because some buildings are over a mile apart, Microsoft offers a shuttle service between buildings to its employees. Since there are thousands of employees on campus, there is a possibility that a shuttle will pick up more than one rider and take an alternate path to drop off someone else before dropping off the first rider. This results in varying shuttle trip times, and thus, if one is really unlucky, the shuttle could take longer than walking.

For this problem, we will consider an employee who would like to compare walking time to shuttle time and assume that the shuttle service provides an accurate estimated arrival time at the destination. Since employees can walk through buildings, using a maps application will not give the most accurate time estimate for walking. This is where your task comes in.

Given street intersections, building numbers, the distances between them, and how long the shuttle would take, tell the employee whether to shuttle or walk. The employee will only walk if it takes less time than the estimated shuttle length. When given the connection between intersections and/or buildings, you can assume they are always bi-directional.

Input definition

The first line of input will contain one integer, T <= 50, which represents the number of paths that need to be calculated.

T test cases will follow in the following format:

The first line of a test case will contain the start building, followed by a space and the destination building. The next line will contain the number of street and building pairs, n <= 50. The next n lines will contain a building/street pairing and the amount of time it takes to walk that path; it is noted that some lines contain the time it takes using a building to building path and some lines contain the time it takes between intersections and a building. After the n pairings, the next line will contain the amount of time it takes the shuttle to drive there.

Buildings will always be an integer. Road names will be a string containing letters, numbers, or both.

Output definition

Your output should contain t lines, one for each test case, in the following format:

Case #i: s d

Where i is the 1-based test case number, s is the shortest time to get from the starting building to the destination building (either by foot or shuttle), and d is "Walk" or "Shuttle", depending on the shortest option. In case of ties, always choose the shuttle.

Example input

2
27 50
5
27 24th&156th 5
40th&156th 50 3
24th&156th 40th&156th 10
50 40th&148th 5
40th&148th 24th&148th 10
15
16 StudioA
4
16 148th&40th 7
148th&40th 25 3
25 148th&36th 4
148th&36th StudioA 5
20
Example output

Case #1: 15 Shuttle
Case #2: 19 Walk
